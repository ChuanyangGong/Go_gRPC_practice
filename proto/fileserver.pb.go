// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.10
// source: fileserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListDirReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ListDirReq) Reset() {
	*x = ListDirReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirReq) ProtoMessage() {}

func (x *ListDirReq) ProtoReflect() protoreflect.Message {
	mi := &file_fileserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirReq.ProtoReflect.Descriptor instead.
func (*ListDirReq) Descriptor() ([]byte, []int) {
	return file_fileserver_proto_rawDescGZIP(), []int{0}
}

func (x *ListDirReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ListDirRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileOrDirs []*ListDirRes_FileOrDirItem `protobuf:"bytes,1,rep,name=fileOrDirs,proto3" json:"fileOrDirs,omitempty"`
	Success    bool                        `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ListDirRes) Reset() {
	*x = ListDirRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirRes) ProtoMessage() {}

func (x *ListDirRes) ProtoReflect() protoreflect.Message {
	mi := &file_fileserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirRes.ProtoReflect.Descriptor instead.
func (*ListDirRes) Descriptor() ([]byte, []int) {
	return file_fileserver_proto_rawDescGZIP(), []int{1}
}

func (x *ListDirRes) GetFileOrDirs() []*ListDirRes_FileOrDirItem {
	if x != nil {
		return x.FileOrDirs
	}
	return nil
}

func (x *ListDirRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UploadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	File     []byte `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *UploadFileReq) Reset() {
	*x = UploadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileReq) ProtoMessage() {}

func (x *UploadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_fileserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileReq.ProtoReflect.Descriptor instead.
func (*UploadFileReq) Descriptor() ([]byte, []int) {
	return file_fileserver_proto_rawDescGZIP(), []int{2}
}

func (x *UploadFileReq) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UploadFileReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type UploadFileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UploadFileRes) Reset() {
	*x = UploadFileRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRes) ProtoMessage() {}

func (x *UploadFileRes) ProtoReflect() protoreflect.Message {
	mi := &file_fileserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRes.ProtoReflect.Descriptor instead.
func (*UploadFileRes) Descriptor() ([]byte, []int) {
	return file_fileserver_proto_rawDescGZIP(), []int{3}
}

func (x *UploadFileRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DownloadFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
}

func (x *DownloadFileReq) Reset() {
	*x = DownloadFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileReq) ProtoMessage() {}

func (x *DownloadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_fileserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileReq.ProtoReflect.Descriptor instead.
func (*DownloadFileReq) Descriptor() ([]byte, []int) {
	return file_fileserver_proto_rawDescGZIP(), []int{4}
}

func (x *DownloadFileReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type DownloadFileRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	File     []byte `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *DownloadFileRes) Reset() {
	*x = DownloadFileRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileRes) ProtoMessage() {}

func (x *DownloadFileRes) ProtoReflect() protoreflect.Message {
	mi := &file_fileserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileRes.ProtoReflect.Descriptor instead.
func (*DownloadFileRes) Descriptor() ([]byte, []int) {
	return file_fileserver_proto_rawDescGZIP(), []int{5}
}

func (x *DownloadFileRes) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DownloadFileRes) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type ListDirRes_FileOrDirItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsFile bool   `protobuf:"varint,2,opt,name=isFile,proto3" json:"isFile,omitempty"`
}

func (x *ListDirRes_FileOrDirItem) Reset() {
	*x = ListDirRes_FileOrDirItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirRes_FileOrDirItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirRes_FileOrDirItem) ProtoMessage() {}

func (x *ListDirRes_FileOrDirItem) ProtoReflect() protoreflect.Message {
	mi := &file_fileserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirRes_FileOrDirItem.ProtoReflect.Descriptor instead.
func (*ListDirRes_FileOrDirItem) Descriptor() ([]byte, []int) {
	return file_fileserver_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListDirRes_FileOrDirItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListDirRes_FileOrDirItem) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

var File_fileserver_proto protoreflect.FileDescriptor

var file_fileserver_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x20, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72,
	0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x44, 0x69, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x44, 0x69, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x44, 0x69, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x72, 0x44, 0x69, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x3f, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x2d, 0x0a, 0x0f, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x41, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x9d, 0x01, 0x0a, 0x0a,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0b, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x72, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x0e, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x28, 0x01, 0x12, 0x34, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e,
	0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fileserver_proto_rawDescOnce sync.Once
	file_fileserver_proto_rawDescData = file_fileserver_proto_rawDesc
)

func file_fileserver_proto_rawDescGZIP() []byte {
	file_fileserver_proto_rawDescOnce.Do(func() {
		file_fileserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_fileserver_proto_rawDescData)
	})
	return file_fileserver_proto_rawDescData
}

var file_fileserver_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_fileserver_proto_goTypes = []interface{}{
	(*ListDirReq)(nil),               // 0: ListDirReq
	(*ListDirRes)(nil),               // 1: ListDirRes
	(*UploadFileReq)(nil),            // 2: UploadFileReq
	(*UploadFileRes)(nil),            // 3: UploadFileRes
	(*DownloadFileReq)(nil),          // 4: DownloadFileReq
	(*DownloadFileRes)(nil),          // 5: DownloadFileRes
	(*ListDirRes_FileOrDirItem)(nil), // 6: ListDirRes.FileOrDirItem
}
var file_fileserver_proto_depIdxs = []int32{
	6, // 0: ListDirRes.fileOrDirs:type_name -> ListDirRes.FileOrDirItem
	0, // 1: FileServer.ListDirectory:input_type -> ListDirReq
	2, // 2: FileServer.UploadFile:input_type -> UploadFileReq
	4, // 3: FileServer.DownloadFile:input_type -> DownloadFileReq
	1, // 4: FileServer.ListDirectory:output_type -> ListDirRes
	3, // 5: FileServer.UploadFile:output_type -> UploadFileRes
	5, // 6: FileServer.DownloadFile:output_type -> DownloadFileRes
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_fileserver_proto_init() }
func file_fileserver_proto_init() {
	if File_fileserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fileserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDirRes_FileOrDirItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fileserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fileserver_proto_goTypes,
		DependencyIndexes: file_fileserver_proto_depIdxs,
		MessageInfos:      file_fileserver_proto_msgTypes,
	}.Build()
	File_fileserver_proto = out.File
	file_fileserver_proto_rawDesc = nil
	file_fileserver_proto_goTypes = nil
	file_fileserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileServerClient is the client API for FileServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileServerClient interface {
	ListDirectory(ctx context.Context, in *ListDirReq, opts ...grpc.CallOption) (*ListDirRes, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileServer_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *DownloadFileReq, opts ...grpc.CallOption) (FileServer_DownloadFileClient, error)
}

type fileServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerClient(cc grpc.ClientConnInterface) FileServerClient {
	return &fileServerClient{cc}
}

func (c *fileServerClient) ListDirectory(ctx context.Context, in *ListDirReq, opts ...grpc.CallOption) (*ListDirRes, error) {
	out := new(ListDirRes)
	err := c.cc.Invoke(ctx, "/FileServer/ListDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileServer_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileServer_serviceDesc.Streams[0], "/FileServer/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerUploadFileClient{stream}
	return x, nil
}

type FileServer_UploadFileClient interface {
	Send(*UploadFileReq) error
	CloseAndRecv() (*UploadFileRes, error)
	grpc.ClientStream
}

type fileServerUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileServerUploadFileClient) Send(m *UploadFileReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerUploadFileClient) CloseAndRecv() (*UploadFileRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerClient) DownloadFile(ctx context.Context, in *DownloadFileReq, opts ...grpc.CallOption) (FileServer_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileServer_serviceDesc.Streams[1], "/FileServer/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileServer_DownloadFileClient interface {
	Recv() (*DownloadFileRes, error)
	grpc.ClientStream
}

type fileServerDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileServerDownloadFileClient) Recv() (*DownloadFileRes, error) {
	m := new(DownloadFileRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServerServer is the server API for FileServer service.
type FileServerServer interface {
	ListDirectory(context.Context, *ListDirReq) (*ListDirRes, error)
	UploadFile(FileServer_UploadFileServer) error
	DownloadFile(*DownloadFileReq, FileServer_DownloadFileServer) error
}

// UnimplementedFileServerServer can be embedded to have forward compatible implementations.
type UnimplementedFileServerServer struct {
}

func (*UnimplementedFileServerServer) ListDirectory(context.Context, *ListDirReq) (*ListDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirectory not implemented")
}
func (*UnimplementedFileServerServer) UploadFile(FileServer_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedFileServerServer) DownloadFile(*DownloadFileReq, FileServer_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}

func RegisterFileServerServer(s *grpc.Server, srv FileServerServer) {
	s.RegisterService(&_FileServer_serviceDesc, srv)
}

func _FileServer_ListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).ListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileServer/ListDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).ListDirectory(ctx, req.(*ListDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileServer_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerServer).UploadFile(&fileServerUploadFileServer{stream})
}

type FileServer_UploadFileServer interface {
	SendAndClose(*UploadFileRes) error
	Recv() (*UploadFileReq, error)
	grpc.ServerStream
}

type fileServerUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileServerUploadFileServer) SendAndClose(m *UploadFileRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerUploadFileServer) Recv() (*UploadFileReq, error) {
	m := new(UploadFileReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServer_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServerServer).DownloadFile(m, &fileServerDownloadFileServer{stream})
}

type FileServer_DownloadFileServer interface {
	Send(*DownloadFileRes) error
	grpc.ServerStream
}

type fileServerDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileServerDownloadFileServer) Send(m *DownloadFileRes) error {
	return x.ServerStream.SendMsg(m)
}

var _FileServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FileServer",
	HandlerType: (*FileServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDirectory",
			Handler:    _FileServer_ListDirectory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileServer_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileServer_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fileserver.proto",
}
